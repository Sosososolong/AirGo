<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Sylas.RemoteTasks.App</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Sylas.RemoteTasks.App.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Sylas.RemoteTasks.App</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2022 - Sylas.RemoteTasks.App - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <!--消息提示框 msgBox-->
    <div class="modal fade" tabindex="-1" id="msgBox">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-sm">
            <div class="modal-content">
                <div class="modal-header" style="border:none;">
                    <h5 class="modal-title"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body"></div>
                <div class="modal-footer" style="border:none;">
                    <button type="button" class="btn btn-" data-bs-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" onclick="handleData(tables['${tableId}'], handleDataType.add)">提交</button>
                </div>
            </div>
        </div>
    </div>
    <!--spinner class去掉了fade, 因为网络请求有时候只有3ms|4ms, 动画时间不止这么长时间, 也就是说此时执行关闭modal的时候modal仍然处于动画状态下还没有完全显示出来, 这样modal是不会关闭的-->
    <div class="modal" tabindex="-1" id="globalSpinner">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-sm">
            <div class="modal-content" style="background-color:transparent; border:none;">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const msgBox = new bootstrap.Modal('#msgBox');
        const spinner = new bootstrap.Modal('#globalSpinner', {
            backdrop: 'static',
            keyboard: false
        });
        /**
         * msg 提示内容
         * title 标题
         * buttons: [{ 
         *   class: 按钮样式: secondary, primary, success, danger, warning
         *   content: 按钮上的显示文本内容
         * }]
         */
        function showMsgBox(msg = '操作成功', title = '提示', buttons = [{ class: 'success', content: '确定' }]) {
            $('#msgBox .modal-title').text(title);
            $('#msgBox .modal-body').text(msg);
            if (Array.isArray(buttons) && buttons.length > 0 && buttons[0].class && buttons[0].content) {
                for (let i = 0; i < buttons.length; i++) {
                    $('#msgBox .modal-footer').html(`<button type="button" class="btn btn-${buttons[i].class}" data-bs-dismiss="modal">${buttons[i].content}</button>`)
                }
            }
            msgBox.show();
        }

        function showInfoBox(msg) {
            $('#msgBox .modal-title').text('提示');
            $('#msgBox .modal-body').text(msg);
            $('#msgBox .modal-footer').html(`<button type="button" class="btn btn-success" data-bs-dismiss="modal">确定</button>`)
            msgBox.show();
        }

        function showErrorBox(errMsg) {
            $('#msgBox .modal-title').text('错误');
            $('#msgBox .modal-body').text(errMsg);
            $('#msgBox .modal-footer').html(`<button type="button" class="btn btn-danger" data-bs-dismiss="modal">关闭</button>`)
            msgBox.show();
        }

        function showSpinner() {
            spinner.show();
        }
        function closeSpinner() {
            spinner.hide();
        }

        function addOverlay(targetId) {
            // 创建覆盖层的 div 元素
            var overlay = document.createElement('div');
            overlay.classList.add('overlay');
            overlay.innerHTML = `
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            `;

            // 获取要覆盖的目标元素
            var target = document.querySelector(`#${targetId}`);

            // 获取目标元素的位置和尺寸信息
            var rect = target.getBoundingClientRect();

            // 设置覆盖层基本样式
            overlay.style.position = 'absolute';
            overlay.style.backgroundColor = 'rgba(200,200,200,0.8)';
            overlay.style.zIndex = '999';
            // 设置覆盖层的位置和尺寸
            overlay.style.top = rect.top + 'px';
            overlay.style.left = rect.left + 'px';
            overlay.style.width = rect.width + 'px';
            overlay.style.height = rect.height + 'px';
            // 设置覆盖层水平垂直居中
            overlay.style.display = 'flex';
            overlay.style.justifyContent = 'center';
            overlay.style.alignItems = 'center';

            // 将覆盖层插入到目标元素的父节点中
            target.parentNode.insertBefore(overlay, target);
            return overlay;
        }

        function removeOverlay(overlay) {
            overlay.remove();
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
