@{
    ViewData["Title"] = "Study";
}
<style>
    .question {
        padding: 3px;
    }
</style>
<div>
    <h1>Study</h1>
    <div id="questions"></div>
</div>
@section Scripts{
    <script>
        @* function randomNext(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        } *@

        function showRemark(input) {
            input.parentElement.querySelector('.remark').style.display = 'inline-block';
        }

        const apiUrl = "/Study/GetQuestions";
        const tableId = 'datatable';
        const tableParentSelector = "#questions";
        const ths = [
            { name: 'title', title: '标题', searchedByKeywords: true },
            { name: 'answer', title: '答案', searchedByKeywords: true },
            { name: 'remark', title: '备注', searchedByKeywords: true },
            { name: 'errorCount', title: '错误次数', notShowInForm: true },
            { name: 'correctCount', title: '正确次数', notShowInForm: true },

            { name: 'createTime', title: '创建时间' },
            { name: 'updateTime', title: '更新时间' },

            { name: 'typeId', title: '题目类型', type: 'dataSource|dataSourceApi=/Study/GetQuestionTypes?pageIndex=1&pageSize=1000|displayField=name' },

            // 操作栏
            { name: '', title: '操作', type: 'button', tmpl: `
                        <button type="button" class="btn btn-primary btn-sm" data-table-id="${tableId}" data-id="{{id}}" data-fetch-url="${apiUrl}" data-method="POST" onclick="showUpdatePannel(this)">修改</button>
                        <button type="button" class="btn btn-primary btn-sm" data-table-id="${tableId}" data-content="&quot;{{id}}&quot;" data-execute-url="/Study/DeleteQuestion" data-method="POST" onclick="showConfirmBox('确定删除? 此操作无法撤销!', () => execute(this))">删除</button>`
            }
        ]
        const idFieldName = "id";

        function buildDataView(data) {
            let container = document.createElement('div');
            data.forEach((q, index) => {
                container.innerHTML += (`<div class="question"><label style="width:180px" for="answer${index}">${q.title}</label>
                <input class="answer-input" data-id="${q.id}" id="answer${index}" value="" onchange="checkAnswer(this)" ondblclick="showRemark(this)" onfocus="this.parentElement.style.backgroundColor='#ddd'" onblur="this.parentElement.style.backgroundColor='#fff'" />
                <input hidden value="${q.answer}" />
                <button type="button" class="btn btn-primary btn-sm" data-table-id="${tableId}" data-id="${q.id}" data-fetch-url="${apiUrl}" data-method="POST" onclick="showUpdatePannel(this)">修改</button>
                <button type="button" class="btn btn-primary btn-sm" data-table-id="${tableId}" data-content="&quot;${q.id}&quot;" data-execute-url="/Study/DeleteQuestion" data-method="POST" onclick="showConfirmBox('确定删除? 此操作无法撤销!', () => execute(this))">删除</button>
                <span class="is-answer-correct">&nbsp;&nbsp;</span>
                <span class="remark" style="display:none;">&nbsp;&nbsp;${q.remark ? q.remark : q.answer}</span>
                </div>`);
            });
            return container;
        }

        /**
            * 初始化数据表格
            */
        createTable(
            apiUrl,                     // 接口地址
            1,                          // pageIndex
            100,                        // pageSize
            tableId,                    // 给数据表一个标识符, 方便一个页面操作多个数据表
            tableParentSelector,        // 数据表父元素
            ths,                        // 数据表列配置
            idFieldName,                // 数据的Id字段名
            null,                       // 数据过滤条件集合 FilterItems
            null,                       // 初始化数据(有的话就渲染此数据, 不会请求接口)
            onDataLoaded,               // 订阅数据渲染完成事件
            '',                         // 对数据表添加父元素, 使用{{tableHtml}}变量代表整个数据表html
            { url: 'Study/AddQuestion', method: 'POST', updateUrl: '/Study/UpdateQuestion', updateMethod: 'POST' },   // 添加修改数据表单弹窗; url为添加数据的url(修改的url放到修改按钮上); method也是请求添加数据接口的请求方法
            true,
            'h1',
            buildDataView
        )

        /**
            * 回调函数
            */
        function onDataLoaded(row) {
            return;   
        }

        async function checkAnswer(input) {
            const nextQuestionDiv = input.parentElement.nextSibling;
            // input已经是最后一个问题, 那么nextQuestionDiv不存在
            if (nextQuestionDiv) {
                nextQuestionDiv.querySelector('input').focus();
            }
            const exeParams = {
                'dataTableId': tableId,
                'dataContent': `{"id": "${input.getAttribute('data-id')}", "answer": "${input.value}"}`,
                'dataExecuteUrl': '/Study/AnswerQuestion',
                'dataMethod': 'POST'
            };
            await execute(exeParams, answerChecked, false);

            function answerChecked(response) {
                const isAnswerCorrectMarkSpan = input.parentElement.querySelector('.is-answer-correct');
                if (response && response.data) {
                    isAnswerCorrectMarkSpan.style = 'background-color: blue;margin-left: 5px;display: inline-block;';
                } else {
                    isAnswerCorrectMarkSpan.style = 'background-color:brown;margin-left: 5px;display: inline-block;';
                    showRemark(input);
                }
            }
        }
    </script>
}