@model Sylas.RemoteTasks.Database.CodeGenerator.CodeGeneratorInDto
<style>
    h5 {
        color: orange;
    }
</style>

<h5>Controller - @(Model.TableModelName)</h5>
<textarea name="codeController" style="width: 1000px;height:200px;" readonly>
/// <summary>
/// 添加@(Model.TableComment)
/// </summary>
/// <param name="dto"></param>
/// <returns></returns>
[HttpPost("Add@(Model.TableModelName)")]
[AutoTran]
public async Task<ReturnResult<bool>> Add@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto)
{
    return await @(Model.ServiceFieldInController).Add@(Model.TableModelName)Async(dto);
}
/// <summary>
/// 更新@(Model.TableComment)
/// </summary>
/// <param name="dto"></param>
/// <returns></returns>
[HttpPost("Update@(Model.TableModelName)")]
[AutoTran]
public async Task<ReturnResult<bool>> Update@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto)
{
    return await @(Model.ServiceFieldInController).Update@(Model.TableModelName)Async(dto);
}
/// <summary>
/// @(Model.TableComment)分页查询
/// </summary>
/// <param name="search"></param>
/// <returns></returns>
[HttpGet("@(Model.TableModelName)s"), AllowAnonymous]
public async Task<ReturnResult<IEnumerable<@(Model.TableModelName)OutDto>>> @(Model.TableModelName)sAsync([FromQuery] @(Model.TableModelName)DataSearch search)
{
    return await @(Model.ServiceFieldInController).@(Model.TableModelName)sAsync(search);
}
/// <summary>
/// 删除@(Model.TableComment)
/// </summary>
/// <param name="ids"></param>
/// <returns></returns>
[HttpPost("Delete@(Model.TableModelName)s")]
[AutoTran]
public async Task<ReturnResult<bool>> Delete@(Model.TableModelName)sAsync(string ids)
{
    return await @(Model.ServiceFieldInController).Delete@(Model.TableModelName)sAsync(ids);
}
</textarea>

<h5>TableConsts - @(Model.TableModelName)</h5>
public const string @Model.TableModelName = "@(Model.MainTable.Name)";

<h5>InDtoDataSearch - @(Model.TableModelName)</h5>
<textarea name="codeInDtoDataSearch" style="width: 1000px;height:200px;" readonly>
public class @(Model.TableModelName)DataSearch : DataSearch
{
    @foreach (var col in Model.SearchColumns)
    {
        @($"    public {col.ColumnCSharpType} {col.ColumnCode} {{ get; set; }}{Environment.NewLine}")
    }
}
</textarea>

<h5>InDto - @(Model.TableModelName)</h5>
<textarea name="codeInDto" style="width: 1000px;height:200px;" readonly>
public class @(Model.TableModelName)InDto
{
    @foreach (var col in Model.MainTable.Columns)
    {
        @($"    public {col.ColumnCSharpType} {col.ColumnCode} {{ get; set; }}{Environment.NewLine}")
    }
}
</textarea>


<h5>OutDto - @(Model.TableModelName)</h5>
<textarea name="codeOutDto" style="width: 1000px;height:200px;" readonly>
public class @(Model.TableModelName)OutDto
{
    @foreach (var col in Model.MainTable.Columns)
    {
        @($"    public {col.ColumnCSharpType} {col.ColumnCode} {{ get; set; }}{Environment.NewLine}")
    }
}
</textarea>


<h5>Entity - @(Model.TableModelName)</h5>
<textarea name="codeEntity" style="width: 1000px;height:200px;" readonly>
public class @(Model.TableModelName) : EntityBase<string>
{
        @foreach (var col in Model.MainTable.Columns)
        {
            if (col.ColumnCode?.ToLower() == "id")
            {
                continue;
            }
            var length = col.ColumnLength;
            if (col.ColumnCSharpType == "string" && !string.IsNullOrWhiteSpace(length) && length != "0")
            {
                @($"    [StringLength({col.ColumnLength})]{Environment.NewLine}")
            }
            var defaultValue = "";
            if (col.ColumnCSharpType == "string")
            {
                defaultValue = " = string.Empty;";
            }
            @($"    public {col.ColumnCSharpType} {col.ColumnCode} {{ get; set; }}{defaultValue}{Environment.NewLine}{Environment.NewLine}")
        }
}
</textarea>

<h5>EntityConfiguration - @(Model.TableModelName)</h5>
<textarea name="codeEntityConfiguration" style="width: 1000px;height:200px;" readonly>
public class @(Model.TableModelName)Configuration : EntityTypeConfigurationBase<@(Model.TableModelName), string>
{
    public override void Configure(EntityTypeBuilder<@(Model.TableModelName)> builder)
    {
        builder.ToTable(TableConsts.@(Model.TableModelName));
    }
}
</textarea>

<h5>ServiceInterface - @(Model.TableModelName)</h5>
<textarea name="codeServiceInterface" style="width: 1000px;height:200px;" readonly>
    /// <summary>
    /// 添加@(Model.TableComment)
    /// </summary>
    /// <param name="dto"></param>
    /// <returns></returns>
    Task<ReturnResult<bool>> Add@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto);
    /// <summary>
    /// 更新@(Model.TableComment)
    /// </summary>
    /// <param name="dto"></param>
    /// <returns></returns>
    Task<ReturnResult<bool>> Update@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto);
    /// <summary>
    /// @(Model.TableComment)分页查询
    /// </summary>
    /// <param name="search"></param>
    /// <returns></returns>
    Task<ReturnResult<IEnumerable<@(Model.TableModelName)OutDto>>> @(Model.TableModelName)sAsync(@(Model.TableModelName)DataSearch search);
    /// <summary>
    /// 删除@(Model.TableComment)
    /// </summary>
    /// <param name="ids"></param>
    /// <returns></returns>
    Task<ReturnResult<bool>> Delete@(Model.TableModelName)sAsync(string ids);
</textarea>

<h5>Service - @(Model.TableModelName)</h5>
<textarea name="codeService" style="width: 1000px;height:200px;" readonly>
    private readonly IRepository<@(Model.TableModelName), string> @(Model.TableRelatedObjectPrefix)Repository;

    public @(Model.TableModelName)DutyService(IRepository<@(Model.TableModelName), string> @(Model.TableRelatedObjectPrefix.TrimStart('_'))Repository)
    {
            @(Model.TableRelatedObjectPrefix)Repository = @(Model.TableRelatedObjectPrefix.TrimStart('_'))Repository;
    }

        /// <summary>
        /// 添加@(Model.TableComment)
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        public async Task<ReturnResult<bool>> Add@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto)
        {
            dto.Id = XGuidHelper.GetDateGuid();
            var entity = dto.MapTo<@(Model.TableModelName)>();
            entity.CreateTime = entity.UpdateTime = DateTime.Now;
            var res = await @(Model.TableRelatedObjectPrefix)Repository.InsertAsync(entity);
            if (res > 0)
            {
                return new ReturnResult<bool>(true);
            }
            return new ReturnResult<bool>(ReturnResultCode.Failed, false);
        }
        /// <summary>
        /// 更新@(Model.TableComment)
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        public async Task<ReturnResult<bool>> Update@(Model.TableModelName)Async(@(Model.TableModelName)InDto dto)
        {
            var entity = @(Model.TableRelatedObjectPrefix)Repository.GetFirst(x => x.Id == dto.Id);
            if (entity is null)
            {
                return await Task.FromResult(new ReturnResult<bool>(ReturnResultCode.Invalid, false, "@(Model.TableComment)不存在"));
            }

            var updating = dto.MapTo<@(Model.TableModelName)>();
            updating.CreateTime = entity.CreateTime;
            updating.UpdateTime = DateTime.Now;
            var res = await @(Model.TableRelatedObjectPrefix)Repository.UpdateAsync(updating);
            if (res > 0)
            {
                return new ReturnResult<bool>(true);
            }
            return new ReturnResult<bool>(ReturnResultCode.Failed, false);
        }
        /// <summary>
        /// @(Model.TableComment)分页查询
        /// </summary>
        /// <param name="search"></param>
        /// <returns></returns>
        public async Task<ReturnResult<IEnumerable<@(Model.TableModelName)OutDto>>> @(Model.TableModelName)sAsync(@(Model.TableModelName)DataSearch search)
        {
            var entities = @(Model.TableRelatedObjectPrefix)Repository.Entities;
            if (!string.IsNullOrWhiteSpace(search.Id))
            {
                return new ReturnResult<IEnumerable<@(Model.TableModelName)OutDto>>
                {
                    Code = ReturnResultCode.Success,
                    Data = new List<@(Model.TableModelName)OutDto> { entities.FirstOrDefaultAsync(x => x.Id == search.Id).MapTo<@(Model.TableModelName)OutDto>() },
                    Count = entities.Count()
                };
            }
            if (!string.IsNullOrWhiteSpace(search.Id))
            {
                entities = entities.Where(x => x.Id == search.Id);
            }
            if (!string.IsNullOrWhiteSpace(search.KeyWord))
            {
                entities = entities.Where(x => x.Name.Contains(search.KeyWord) || x.SimpleName.Contains(search.KeyWord));
            }
            if (!string.IsNullOrWhiteSpace(search.Name))
            {
                entities = entities.Where(x => x.Name == search.Name);
            }
            if (!string.IsNullOrWhiteSpace(search.SimpleName))
            {
                entities = entities.Where(x => x.SimpleName == search.SimpleName);
            }
            var count = entities.Count();
            return await Task.FromResult(new ReturnResult<IEnumerable<@(Model.TableModelName)OutDto>>
            {
                Code = ReturnResultCode.Success,
                Data = entities.OrderAndPager(search).Select(x => x.MapTo<@(Model.TableModelName)OutDto>()),
                Count = count
            });
        }
        /// <summary>
        /// 删除@(Model.TableComment)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public async Task<ReturnResult<bool>> Delete@(Model.TableModelName)sAsync(string ids)
        {
            var idsArr = ids.Split(',');
            var res = await @(Model.TableRelatedObjectPrefix)Repository.DeleteBatchAsync(x => ids.Contains(x.Id));
            if (res > 0)
            {
                return new ReturnResult<bool>(true);
            }
            return new ReturnResult<bool>(false);
        }
</textarea>

