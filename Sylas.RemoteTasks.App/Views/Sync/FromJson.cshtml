@{
    ViewData["Title"] = "Sync Databases";
}

<form method="get" action="SyncDbs" id="requestForm">
    <div class="row" style="width: 90%; margin: auto;">
        <div class="col-sm-5 mb-4 source-container d-flex flex-column justify-content-center">
            <label for="sourceJsons" class="form-label">Source:</label>
            <input type="file" multiple id="sourceJsons" name="sourceJsons" onchange="showFiles(this)" />
        </div>
        <div class="col-sm-2" style="margin:auto; text-align:center;">
            <button class="btn btn-primary btn-sm" style="line-height: 28px;" type="button" onclick="switchSourceAndTarget()">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="16" fill="currentColor" class="bi bi-arrow-left-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1 11.5a.5.5 0 0 0 .5.5h11.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 11H1.5a.5.5 0 0 0-.5.5m14-7a.5.5 0 0 1-.5.5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H14.5a.5.5 0 0 1 .5.5" />
                </svg>
            </button>
        </div>
        <div class="col-sm-5 mb-4">
            <label for="targetConnectionString" class="form-label">Target:</label>
            <select id="targetConnectionString" name="targetConnectionString" class="form-control form-select-sm"></select>

            <label for="targetTables" class="form-label mt-3">targetTables:</label>
            <input type="text" id="targetTables" name="targetTables" class="form-control form-control-sm">
        </div>
        <div class="col-sm-12">
            <button class="btn btn-primary mt-3 btn-sm sync-btn" type="button" onclick="syncFromJsonAsync()">开始同步</button>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        const bodyObj = {
            pageIndex: 1,
            pageSize: 100
        };
        const body = JSON.stringify(bodyObj);
        httpRequestDataAsync(`/Database/ConnectionStrings`, null, 'POST', body)
            .then(rsp => {
                connectionStrings = rsp.data;
                let options = '';
                connectionStrings.sort((item1, item2) => item1['orderNo'] > item2['orderNo'] ? 1 : -1);
                for (let i = 0; i < connectionStrings.length; i++) {
                    options += `<option value="${connectionStrings[i].id}">${connectionStrings[i].name}</option>`
                }
                document.querySelector('#targetConnectionString').innerHTML = `<option conn-id="0" value="">请选择</options>${options}`;
            })

        async function syncFromJsonAsync() {
            // const source = document.querySelector('#sourceConnectionString')
            // if (!source.value) {
            //     showErrorBox("请先选择源数据库")
            //     return
            // }
            // const sourceConnId = source.value

            const target = document.querySelector('#targetConnectionString')
            if (!target.value) {
                showErrorBox("请先选择目标数据库")
                return
            }
            // const targetConnId = target.value

            // const syncParams = {
            //     sourceConnectionString: sourceConnId,
            //     sourceTable: document.querySelector('#sourceTable').value,
            //     targetConnectionString: targetConnId,
            //     targetTable: document.querySelector('#targetTable').value
            // }
            const formData = new FormData(document.querySelector('#requestForm'))
            // formData.delete('sourceJsons_files')
            // for (let i = 0; i < cachedFiles['sourceJsons_files'].length; i++) {
            //     formData.append('sourceJsons_files', cachedFiles['sourceJsons_files'][i])
            // }
            const exeParams = {
                dataContent: formData,
                dataExecuteUrl: '/Sync/SyncFromJsons',
                dataMethod: 'POST',
                trigger: document.querySelector('.sync-btn')
            };
            await execute(exeParams);
        }

        function switchSourceAndTarget() {
            const sourceControl = document.querySelector('#sourceConnectionString')
            const targetControl = document.querySelector('#targetConnectionString')
            if (sourceControl.value || targetControl.value) {
                const sourceTempValue = sourceControl.value;
                sourceControl.value = targetControl.value
                targetControl.value = sourceTempValue
            }

            const sourceTable = document.querySelector('#sourceTable')
            const targetTables = document.querySelector('#targetTables')
            if (sourceTable.value || targetTables.value) {
                const sourceTempValue = sourceTable.value;
                sourceTable.value = targetTables.value
                targetTables.value = sourceTempValue
            }
        }

        function showFiles(target) {
            const files = target.files
            let targetTables = '';
            cachedFiles['sourceJsons_files'] = []
            for (let i = 0; i < files.length; i++) {
                document.querySelector('.source-container').lastElementChild.insertAdjacentHTML('afterend', `<div class="text-primary">${files[i].name} - ${formatFileSize(files[i].size)}</div>`)
                targetTables += files[i].name.replace('.json', '') + ',';
                cachedFiles['sourceJsons_files'].push(files[i])
            }
            document.querySelector('input[name="targetTables"]').value = targetTables.substring(0, targetTables.length - 1)
        }
    </script>
}
