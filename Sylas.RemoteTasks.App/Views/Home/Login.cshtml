@{
    ViewData["Title"] = "Login";
    Layout = null;
    var appDir = AppDomain.CurrentDomain.BaseDirectory;
    if (appDir.Replace('\\', '/').Contains("/bin/Debug"))
    {
        appDir = System.IO.Path.Combine(appDir, "../../../");
    }
    var bgPics = System.IO.Directory.GetFiles(System.IO.Path.Combine(appDir, "wwwroot/imgs/")).Select(x => System.IO.Path.GetFileName(x));
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<style>
    body {
        background-size: 100% 100%;
    }

    h2 {
        color: #ffffff90;
        margin-top: 5%;
    }

    #login_box {
        /*结尾的60表示不透明度*/
        background-color: #00000060;
        text-align: center;
        border-radius: 10px;
        padding: 50px;
    }

    .input-box {
        margin-top: 5%;
    }

    span {
        color: #fff;
    }

    .login-input {
        margin-top: 50px;
        border-radius: 10px;
        border: 0;
        text-align: center;
        line-height: 30px;
        font-size: 15px;
        background-color: #00000060;
        color: #fff;
    }

    #sign_up {
        margin-top: 45%;
        margin-left: 60%;
    }

    a {
        color: #b94648;
    }

    .login-btn:disabled {
        cursor: not-allowed;
    }
    .login-btn {
        background-color: #1e71c1;
        color: #fff;
        padding: 5px 15px;
        font-size: 15px;
        margin-top: 50px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
    }
    .login-btn:hover {
        background-color: #2980b9;
    }

    .sk-chase {
        width: 40px;
        height: 40px;
        position: fixed;
        animation: sk-chase 2.5s infinite linear both;
        left: 50%;
        top: 50%;
        display: none;
    }

    .sk-chase-dot {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0; 
        animation: sk-chase-dot 2.0s infinite ease-in-out both; 
    }

    .sk-chase-dot:before {
        content: '';
        display: block;
        width: 25%;
        height: 25%;
        background-color: #fff;
        border-radius: 100%;
        animation: sk-chase-dot-before 2.0s infinite ease-in-out both; 
    }

    .sk-chase-dot:nth-child(1) { animation-delay: -1.1s; }
    .sk-chase-dot:nth-child(2) { animation-delay: -1.0s; }
    .sk-chase-dot:nth-child(3) { animation-delay: -0.9s; }
    .sk-chase-dot:nth-child(4) { animation-delay: -0.8s; }
    .sk-chase-dot:nth-child(5) { animation-delay: -0.7s; }
    .sk-chase-dot:nth-child(6) { animation-delay: -0.6s; }
    .sk-chase-dot:nth-child(1):before { animation-delay: -1.1s; }
    .sk-chase-dot:nth-child(2):before { animation-delay: -1.0s; }
    .sk-chase-dot:nth-child(3):before { animation-delay: -0.9s; }
    .sk-chase-dot:nth-child(4):before { animation-delay: -0.8s; }
    .sk-chase-dot:nth-child(5):before { animation-delay: -0.7s; }
    .sk-chase-dot:nth-child(6):before { animation-delay: -0.6s; }

    @@keyframes sk-chase {
      100% { transform: rotate(360deg); } 
    }

    @@keyframes sk-chase-dot {
      80%, 100% { transform: rotate(360deg); } 
    }

    @@keyframes sk-chase-dot-before {
      50% {
        transform: scale(0.4); 
      } 100%, 0% {
        transform: scale(1.0); 
      } 
    }
</style>

<div class="sk-chase">
    <div class="sk-chase-dot"></div>
    <div class="sk-chase-dot"></div>
    <div class="sk-chase-dot"></div>
    <div class="sk-chase-dot"></div>
    <div class="sk-chase-dot"></div>
    <div class="sk-chase-dot"></div>
</div>
<div id="login_box">
    <h2>LOGIN</h2>
    <p class="msg" style="color:orange;"></p>
    <div class="input_box">
        <input type="text" class="username login-input" placeholder="请输入用户名" />
    </div>
    <div class="input_box">
        <input type="password" class="password login-input" placeholder="请输入密码" />
    </div>
    <button class="login-btn">登录</button>
</div>

<script>
    let firstTimeInit = true;
    let lastWindowWidth = 0;
    initStyle();
    window.addEventListener("resize", (event) => {
        initStyle();
    });
    firstTimeInit = false;

    document.querySelector('button').onclick = () => {
        document.querySelector('.msg').textContent = '';
        const username = document.querySelector('.username').value;
        const password = document.querySelector('.password').value;
        if (!username) {
            document.querySelector('.msg').textContent = "用户名不能为空";
            return;
        }
        if (!password) {
            document.querySelector('.msg').textContent = "密码不能为空";
            return;
        }
        
        login(username, password);
    };

    function login(username, password) {
        const redirectPath = getQueryStringParameter('redirect_path')
        document.querySelector('.login-btn').setAttribute("disabled", "disabled");
        document.querySelector('.sk-chase').style.display = 'block';
        fetch(`/Home/GetToken?username=${username}&password=${password}`, {
            "headers": {
                "accept": "application/json",
                "accept-language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
                "content-type": "application/json"
            },
            "body": "",
            "method": "POST",
            "mode": "cors",
            "credentials": "include"
        }).then(response => response.text())
            .then(result => {
                var userInfoResponse = JSON.parse(result);
                if (userInfoResponse.code == 400) {
                    document.querySelector('.msg').textContent = "登录失败:" + userInfoResponse.data[0];
                    return;
                }
                localStorage.setItem("userinfo", JSON.stringify(userInfoResponse.data));
                localStorage.setItem("access_token", userInfoResponse.data.access_token);
                localStorage.setItem("access_token_expires_time", userInfoResponse.data.expires_time);
                location.href = redirectPath ? redirectPath : "/";
            })
            .catch(error => {
                document.querySelector('.msg').textContent = '账号或密码错误';
                console.log(error);
            })
            .finally(() => {
                document.querySelector('.login-btn').removeAttribute("disabled");
                document.querySelector('.sk-chase').style.display = 'none';
            });
    }

    function initStyle() {
        if (lastWindowWidth > 0 && window.innerWidth === lastWindowWidth) {
            return;
        }
        lastWindowWidth = window.innerWidth;
        // 背景图片
        const pics = '@(string.Join(',', bgPics))'.split(',');
        console.log(pics);
        const pcImages = pics.filter(x => x.startsWith('bg-pc'));
        const mobileImages = pics.filter(x => x.startsWith('bg-mobile'));
        const isMobile = (window.innerWidth > 0 && window.innerWidth < 768) || (window.outerWidth > 0 && window.outerWidth < 768);
        const images = isMobile ? mobileImages : pcImages;
        const randomIndex = Math.floor(Math.random() * images.length);
        const bgImage = images[randomIndex];
        document.body.style.backgroundImage = `url('/imgs/${bgImage}')`;

        const loginBox = document.querySelector('#login_box');
        const inputs = document.querySelectorAll('input');
        const loginBtn = document.querySelector('.login-btn');
        if (isMobile) {
            // 移动端登录表单容器
            loginBox.style.width = '70%';
            loginBox.style.height = '50%';
            loginBox.style.margin = '30% auto';

            // 移动端登录输入框
            inputs.forEach(input => {
                input.style.width = '100%';
                input.style.height = '2rem';
            });
            
        } else {
            // PC登录表单容器
            loginBox.style.width = '20%';
            loginBox.style.height = '400px';
            loginBox.style.margin = '10% auto';

            // PC登录输入框
            inputs.forEach(input => {
                input.style.width = '60%';
                input.style.height = '30px';
            });
        }

        const usernameInput = inputs[0];

        // 登录按钮(保持和输入框尺寸一致)
        loginBtn.style.width = `${usernameInput.clientWidth}px`;
        loginBtn.style.height = `${usernameInput.clientHeight}px`;

        if (firstTimeInit) {
            // 只有第一次初始化时，将焦点设置到用户名输入框; 否则手机上切换密码输入框时也会触发window的resize事件导致又聚焦到用户名输入框, 导致始终无法切换到密码输入框
            usernameInput.focus();
        }
    }
    function getQueryStringParameter(param) {
        // 解析URL
        let queryString = location.href.split('?')[1];
        if (!queryString) {
            return null; // 如果没有query string，返回null
        }

        // 将query string转换为键值对对象
        let params = {};
        queryString.split('&').forEach(pair => {
            let [key, value] = pair.split('=');
            params[decodeURIComponent(key)] = decodeURIComponent(value || '');
        });

        // 返回指定参数的值
        return params[param] || null;
    }
</script>
