@model Sylas.RemoteTasks.Utils.ServerInfo
@using Newtonsoft.Json
@{
    ViewData["Title"] = "基本信息";
}
<style>
    th, td {
        border: 1px solid #ddd;
        padding: 4px;
    }
</style>
<h5>@ViewData["Title"]</h5>

<table>
    <tr><td>服务器名称:</td><td>@Model.MachineName</td></tr>
    <tr><td>服务器IP:</td><td>@Model.IP</td></tr>
    <tr><td>操作系统:</td><td>@Model.OSName</td></tr>
    <tr><td>操作系统架构:</td><td>@Model.OSArchitecture</td></tr>
    <tr><td>.NET版本:</td><td>@Model.DoNetName</td></tr>
    <tr><td>CPU数量:</td><td>@Model.CpuCount</td></tr>
    <tr><td>应用开始运行时间:</td><td>@Model.AppStartTime</td></tr>
    <tr><td>应用总运行时间:</td><td>@Model.AppRunTime</td></tr>
    <tr><td>应用占用内存:</td><td>@(Model.AppRam)MB / @(Model.AppRamRate)%</td></tr>
</table>

<h5 style="margin-top:20px;">CPU内存信息</h5>
<table>
    <tr><td>CPU使用率:</td><td>@(Model.MemoryInfo.CpuRate)%</td></tr>
    <tr><td>总内存:</td><td>@(Math.Round(Model.MemoryInfo.Total / 1024, 0))GB</td></tr>
    <tr><td>已使用:</td><td>@(Math.Round(Model.MemoryInfo.Used / 1024, 0))GB</td></tr>
    <tr><td>空闲:</td><td>@(Math.Round(Model.MemoryInfo.Free / 1024, 0))GB</td></tr>
    <tr><td>内存使用率:</td><td>@Math.Round(100 * Model.MemoryInfo.Used / Model.MemoryInfo.Total, 2)%</td></tr>
</table>

<h5 style="margin-top:20px;">磁盘信息</h5>
<table>
    @foreach(var item in Model.DiskInfos)
    {
        <tr>
            <td>@(item.DiskName)(@item.TypeName):</td>
            <td>@(100 * item.Used / item.TotalSize)%</td>
        </tr>
    }
</table>

<h5 style="margin-top:20px;">进程状态</h5>
<table class="processes-table">
    <thead>
        <tr>
            <th>进程名称 - PID</th>
            <th>CPU占用率</th>
            <th>内存占用</th>
        </tr>
    </thead>
</table>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/informationHub").build();

        //Disable the send button until connection is established.
        // document.getElementById("sendButton").disabled = true;

        const trList = [];
        connection.on("ClientShowProcessesStatus", function (infos) {
            const processesTable = document.querySelector('.processes-table');
            for (let i = 0; i < trList.length; i++) {
                const tr = trList[i];
                tr.remove();
            }
            for (let i = 0; i < infos.length; i++) {
                const info = infos[i];
                const tr = document.createElement('tr');
                const infoArr = info.split(':');
                const process = infoArr[0];
                const cpuRateArr = infoArr[1].split(' ');
                tr.innerHTML = `<td>${process}</td><td>${cpuRateArr[0]}%</td><td>${cpuRateArr[1]}MB</td>`;
                processesTable.appendChild(tr);
                trList.push(tr);
            }
        });

        connection.start().then(function () {
            // document.getElementById("sendButton").disabled = false;
            
            // 请求服务器发送进程的CPU占用率和内存占用
            connection.invoke("StartGetProcessesStatus").catch(function (err) {
                return console.error(err.toString());
            });
        }).catch(function (err) {
            return console.error(err.toString());
        });

        // window.addEventListener('beforeunload', function () {
        //     console.log('用户即将离开页面');
        //     // 可以在这里发送一个消息到服务器，告知用户离开了
        // });

    </script>
}