@using Sylas.RemoteTasks.App.RemoteHostModule.Anything
@model List<AnythingInfo>;
@{
    ViewData["Title"] = "Anything ...";
}
<div class="my-4">
    <div class="row">
        @foreach (var anything in Model)
        {
            <div class="row">
                <div class="col-md-12 mb-4">
                    <div class="card">
                        @{
                            string title = anything.Name.Replace(".", string.Empty);
                        }
                        <div class="card-header" id="heading-@(title)">
                            <h5 class="card-title mb-0">
                                <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(title)" aria-expanded="false" aria-controls="collapse@(title)">
                                    @(anything.Name)
                                </button>
                            </h5>
                        </div>
                        <div id="collapse@(title)" class="collapse" aria-labelledby="heading-@(title)" data-bs-parent="#accordion">
                            <div class="card-body">
                                @foreach (var anythingCommand in anything.Commands)
                                {
                                    <p class="card-text">
                                        <button class="btn btn-primary"@(!string.IsNullOrWhiteSpace(anythingCommand.Disabled) ? " disabled" : "") onclick="executeCommand('@(anything.SettingId)', '@(anythingCommand.Name)', this)">@(anythingCommand.Name)</button>
                                    </p>
                                    <p class="card-text">
                                        @(anythingCommand.CommandTxt)
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts{
    <script>
        function executeCommand(settingId, commandName, executeBtn) {
            showSpinner(executeBtn);
            fetch('/Hosts/ExecuteCommand', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ settingId, commandName })
            }).then(response => {
                if (response.ok) {
                    var rspJson = response.json();
                    return rspJson;
                } else {
                    showErrorBox("Failed to execute command: " + response.json());
                }
            }).then(rspJson => {
                showMsgBox(rspJson.message ? rspJson.message : "操作成功")
            }).catch(error => {
                showErrorBox(error);
            }).finally(() => {
                closeSpinner(executeBtn);
            });
        }

        function searchItems(searchDropdown) {
            // Get reference to dropdown items
            var dropdownItems = searchDropdown.parentNode.parentNode.querySelectorAll(".dropdown-item");

            var value = searchDropdown.value.toLowerCase();
            dropdownItems.forEach(function (item) {
                if (item.textContent.toLowerCase().indexOf(value) > -1) {
                    item.style.display = "block";
                } else {
                    item.style.display = "none";
                }
            });
        }
    </script>
}
