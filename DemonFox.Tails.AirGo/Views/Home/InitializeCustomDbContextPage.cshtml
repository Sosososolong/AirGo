
@{
    ViewData["Title"] = "InitializeCustomDbContextPage";
}

    <div class="container">
        <div class="card">
            <h5 class="card-header">向自定义DbContext中添加实体对应的实体集属性</h5>
            <div class="card-body">
                <form class="needs-validation myDbContextForm" method="post" id="tt" action="" novalidate>

                    <div class="form-group">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="fromEntityOrDb" id="fromEntityOrDb1" value="0" checked>
                            <label class="form-check-label" for="exampleRadios1">
                                From Entity
                            </label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="fromEntityOrDb" id="fromEntityOrDb2" value="1">
                            <label class="form-check-label" for="exampleRadios2">
                                From Db
                            </label>
                        </div>
                    </div>
                    <div style="border:1px solid #ddd; padding:10px; margin:10px;">
                        <div class="fromDbOrEntitiesData" style="padding-bottom:20px;">

                        </div>
                        @if (ViewBag.MyDbContextBtnText.Split('-')[1] == "create")
                        {
                            <div class="form-group">
                                <label class="col-sm-2 col-form-label">Custom DbContext</label>
                                <div class="col-sm-10">
                                    <input class="form-control" type="text" name="myDbContextName" value="MyDbContext" />
                                </div>
                            </div>
                        }
                        <button class="btn btn-primary operationBtn addEntitySetsBtn" target-action="@ViewBag.MyDbContextBtnText.Split('-')[1]" type="submit">@ViewBag.MyDbContextBtnText.Split('-')[0]</button>
                    </div>
                </form>
            </div>
        </div>

        @if (ViewBag.AllRegistedEntity != null)
        {
            <div class="card">
                <div class="card-header">
                    实体集(数据表)之间的关系
                </div>
                <div class="card-body">
                    <form class="tablesRelationship" method="post" id="tablesRelationship" action="">
                        <div class="relationshipCon">
                            <div class="form-row align-items-center">
                                @foreach (string entity in ViewBag.AllRegistedEntity)
                                {
                                    <div class="col-auto my-1">
                                        <div class="form-check">
                                            <input class="form-check-input entitiiesRel" type="checkbox" name="rel-entity-@entity" id="rel-entity-@entity">
                                            <label class="form-check-label" for="rel-entity-@entity">
                                                @entity
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="form-row align-items-center">
                                <label for="relationshipType">请选择关系类型</label>
                                <select class="custom-select" name="relationshipType" id="relationshipType">
                                    <option selected disabled value="">Choose...</option>
                                    <option value="0">一对一</option>
                                    <option value="1">一对多</option>
                                </select>
                            </div>
                        </div>
                        <button class="btn btn-primary addRelationshipBtn" style="margin-top:10px;">确定</button>
                    </form>
                </div>
            </div>
        }
    </div>
		
@section Scripts{
    <script>
        $(function () {            
            // 因为每次刷新页面, 其实只有第一个radio有checked属性, 但是radio的选中状态还保留上次的选择状态, 第一个radio的UI不一定是选中状态, 所以每次刷新页面后, 需要点击一次第一个radio, 使得它被选中
            $('input[name="fromEntityOrDb"][checked]').click();
            // 根据所选择的从实体操作还是从数据库操作, 显示不同表单内容
            checkFromEntitiesOrDb($('input[name="fromEntityOrDb"]'));
            $('input[name="fromEntityOrDb"]').change(function () {
                checkFromEntitiesOrDb($(this));
            })

            // 全选框
            $('#checekedAll').click(function (e) {
                var checkStatus = $(this).prop('checked');
                $('input[name^="entity-"]').each(function () {
                    $(this).prop('checked', checkStatus);
                })
            })

                        
            // 两个实体(数据表)之间的关联关系
            $('.entitiiesRel').click(function () {                
                relationshipingEntities();
            });
            $('select[name="relationshipType"]').change(function () {                
                relationshipingEntities();
            })            
        })
        function checkFromEntitiesOrDb(jqObj) {
            if (jqObj.val() == "0") {
                showEntities();
                removeDbTables();
            } else {
                showDbTables();
                removeEntities();
            }
        }


        function showEntities() {
            $(".fromDbOrEntitiesData").append(`<div class="form-row align-items-center entitiesCon">
                @foreach (string entity in ViewBag.AllEntities)
                {
                    <div class="col-auto my-1">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="entity-@entity" id="entity-@entity">
                        <label class="form-check-label" for="entity-@entity">
                            @entity
                        </label>
                    </div>
                </div>
                }
            </div>`);
            // 如果没有新的实体需要加入自定义的MyDbContext中
            if ($(".fromDbOrEntitiesData").find('.entitiesCon').find('.form-check').length === 0) {
                // 显示信息
                $(".fromDbOrEntitiesData").find('.entitiesCon').append('<div style="padding:10px 5px">所有实体在自定义DbContext类中均有对应的实体集属性</div>')
                // 隐藏添加实体集的按钮
                $('.addEntitySetsBtn').remove();
            } else {
                $('.entitiesCon').append(`<div class="col-auto my-1">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="checekedAll" id="checekedAll">
                        <label class="form-check-label" for="checekedAll">
                            全选
                        </label>
                    </div>
                </div>`);
            }
        }
        function removeEntities() {
            $('.entitiesCon').remove();
        }
        function showDbTables() {
            $(".fromDbOrEntitiesData").append(`<div class="tablesCon" style="color:red;">Hello world</div>`);
        }
        function removeDbTables() {
            $(".tablesCon").remove();
        }        
        
        // 点击按钮 - 为MyDbContext添加实体集属性
        $('.operationBtn').click(async function (e) {
            e.preventDefault();
            e.stopPropagation();
            var type = $(this).attr("target-action");            
            var formSerial = {};
            $($("#tt").serializeArray()).each(function () {
                formSerial[this.name] = this.value;
            });
            formSerial["type"] = type;
            formSerial["myDbContextName"] = $('input[name="myDbContextName"]').val();

            var result = await $.ajax({
                type: "post",
                url: "DbContextDoingSomething",
                data: formSerial,
                dataType: "json", // 对应请求头"Accept"的值，指定API返回的数据格式(比如text，html)，如果API不支持指定的格式将会返回API的默认格式的数据或者返回406(Not Acceptable)状态码
                xhrFields: {
                    withCredentials: true  // 请求头会带上origin字段，配合服务端Access-Control-Allow-Origin设置的值与之对应即可实现跨域
                },
            });
            if (result.code === 1) {
                alert("操作成功");
                location.reload(true);
            } else {
                alert(result.msg);
                console.log(result);
            }
        })

        // 当选择两张表之后, 需指定"外键表"和"外键"
        function relationshipingEntities() {
            // 先移除之前的
            $('.chooseForeignKeyTableDiv').remove();
            $('.chooseForeignKeyDiv').remove();
            if ($(':checked[name^="rel-entity"]').length == 2 && $('select[name="relationshipType"]')[0].selectedIndex > 0) {
                // 先显示 指定外键表 下拉框, 指定外键表                
                $('.relationshipCon').append(`<div class="form-group chooseForeignKeyTableDiv">
                            <label for="foreignKeyTable">指定外键表</label>
                            <select class="custom-select" name="foreignKeyTable" id="foreignKeyTable">
                                <option selected disabled value="">Choose...</option>
                                <option value="` + $(':checked[name^="rel-entity"]')[0].labels[0].innerText + `">` + $(':checked[name^="rel-entity"]')[0].labels[0].innerText + `</option>
                                <option value="` + $(':checked[name^="rel-entity"]')[1].labels[0].innerText + `">` + $(':checked[name^="rel-entity"]')[1].labels[0].innerText + `</option>
                            </select>
                        </div>`);

                $('select[name="foreignKeyTable"]').change(async function () {
                    let result = await $.ajax({
                        type: "post",
                        url: "GetEntityProperties",
                        data: { "entityNameOfForeignKeyTable": $(this).val() },
                        dataType: "json", // 对应请求头"Accept"的值，指定API返回的数据格式(比如text，html)，如果API不支持指定的格式将会返回API的默认格式的数据或者返回406(Not Acceptable)状态码
                        xhrFields: {
                            withCredentials: true  // 请求头会带上origin字段，配合服务端Access-Control-Allow-Origin设置的值与之对应即可实现跨域
                        },
                    });

                    let foreignKeyTableColumns = result.data;
                    $('.chooseForeignKeyDiv').remove();
                    // 再显示 指定外键 下拉框, 指定外键
                    let columnsOptions = "";
                    for (var i = 0; i < foreignKeyTableColumns.length; i++) {
                        columnsOptions += '<option value="' + foreignKeyTableColumns[i] + '">' + foreignKeyTableColumns[i] + '</option>';
                    }
                    
                    $('.relationshipCon').append(`<div class="form-group chooseForeignKeyDiv">
                            <label for="foreignKey">指定外键</label>
                            <select class="custom-select" name="foreignKey" id="foreignKey">
                                <option selected disabled value="">Choose...</option>
                                ` + columnsOptions + `
                            </select>
                        </div>`);                    
                });
                
            } else {
                $('.chooseForeignKeyTableDiv').remove();
                $('.chooseForeignKeyDiv').remove();
            }
        }
        // 两个实体(数据表)之间的关联关系
        $('.addRelationshipBtn').click(async function (e) {
            e.preventDefault();
            e.stopPropagation();

            let formData = {};
            $(':checked[name^="rel-entity"]').each(function () {
                formData[this.name] = this.value;
            });
            formData["relationshipType"] = $('select[name="relationshipType"]').val();
            if ($(':checked[name^="rel-entity"]').length == 2 && $('select[name="relationshipType"]')[0].selectedIndex > 0) {
                if ($('select[name="foreignKeyTable"]')[0].selectedIndex === 0) {
                    alert("请选择外键表");
                    return;
                }
                if ($('select[name="foreignKey"]')[0].selectedIndex === 0) {
                    alert("请选择外键");
                    return;
                }
                formData["foreignKeyTable"] = $('select[name="foreignKeyTable"]').val();                
                formData["foreignKey"] = $('select[name="foreignKey"]').val();
            } else {
                alert("请选择两个具有关联关系的数据表对应的实体类, 并指定它们的关系")
            }
            
            $.ajax({
                type: "post",
                url: "DbContextBuildRelationship",
                data: formData,
                dataType: "json", // 对应请求头"Accept"的值，指定API返回的数据格式(比如text，html)，如果API不支持指定的格式将会返回API的默认格式的数据或者返回406(Not Acceptable)状态码
                xhrFields: {
                    withCredentials: true  // 请求头会带上origin字段，配合服务端Access-Control-Allow-Origin设置的值与之对应即可实现跨域
                },
                success: function (result) {
                    if (result.code === 0) {
                        alert(result.msg)
                    } else {
                        alert("操作成功")
                    }
                },
                error: function (result) {
                    alert(result.responseText.substring(0, result.responseText.indexOf("\r\n")));       
                    console.log(result.responseText);
                }
            });

            
        })
    </script>
}

